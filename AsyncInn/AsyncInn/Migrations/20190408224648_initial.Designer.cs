// <auto-generated />
using AsyncInn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AsyncInn.Migrations
{
    [DbContext(typeof(AsyncInnDBContext))]
    [Migration("20190408224648_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AsyncInn.Models.AmenityPackage", b =>
                {
                    b.Property<int>("AmenityPackageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AC");

                    b.Property<bool>("Coffee");

                    b.Property<bool>("ContinentalBreakfast");

                    b.Property<decimal>("Cost");

                    b.Property<bool>("Hottub");

                    b.Property<bool>("Minibar");

                    b.Property<bool>("MountainView");

                    b.Property<string>("Name");

                    b.Property<bool>("OceanView");

                    b.Property<bool>("Penthouse");

                    b.Property<bool>("PrivateBeach");

                    b.Property<bool>("Valet");

                    b.HasKey("AmenityPackageId");

                    b.ToTable("AmenityPackages");

                    b.HasData(
                        new
                        {
                            AmenityPackageId = 1,
                            AC = true,
                            Coffee = true,
                            ContinentalBreakfast = true,
                            Cost = 9001m,
                            Hottub = true,
                            Minibar = true,
                            MountainView = true,
                            Name = "The Fresh",
                            OceanView = true,
                            Penthouse = true,
                            PrivateBeach = true,
                            Valet = true
                        });
                });

            modelBuilder.Entity("AsyncInn.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Address = "123 Place Street",
                            City = "City of Sea",
                            Name = "Sea City",
                            Phone = "1111111111",
                            State = "Some State"
                        });
                });

            modelBuilder.Entity("AsyncInn.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bedrooms");

                    b.Property<string>("Nickname");

                    b.Property<string>("Roomshape");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Bedrooms = 3,
                            Nickname = "The Boxer",
                            Roomshape = "Square"
                        },
                        new
                        {
                            RoomId = 2,
                            Bedrooms = 3,
                            Nickname = "The Pyramid",
                            Roomshape = "Triangle"
                        },
                        new
                        {
                            RoomId = 3,
                            Bedrooms = 2,
                            Nickname = "The Tower",
                            Roomshape = "Multifloor"
                        },
                        new
                        {
                            RoomId = 4,
                            Bedrooms = 0,
                            Nickname = "The Beer Glass",
                            Roomshape = "Circle"
                        });
                });

            modelBuilder.Entity("AsyncInn.Models.RoomLocation", b =>
                {
                    b.Property<int>("RoomLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId");

                    b.Property<bool>("PetFriendly");

                    b.Property<int>("Price");

                    b.Property<int>("RoomId");

                    b.HasKey("RoomLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomLocations");

                    b.HasData(
                        new
                        {
                            RoomLocationId = 1,
                            LocationId = 1,
                            PetFriendly = true,
                            Price = 1000,
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("AsyncInn.Models.RoomLocationAmenities", b =>
                {
                    b.Property<int>("RoomLocationId");

                    b.Property<int>("AmenityPackageId");

                    b.HasKey("RoomLocationId", "AmenityPackageId");

                    b.HasIndex("AmenityPackageId");

                    b.ToTable("RoomLocationAmenities");

                    b.HasData(
                        new
                        {
                            RoomLocationId = 1,
                            AmenityPackageId = 1
                        });
                });

            modelBuilder.Entity("AsyncInn.Models.RoomLocation", b =>
                {
                    b.HasOne("AsyncInn.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AsyncInn.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AsyncInn.Models.RoomLocationAmenities", b =>
                {
                    b.HasOne("AsyncInn.Models.AmenityPackage", "Amenities")
                        .WithMany()
                        .HasForeignKey("AmenityPackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AsyncInn.Models.RoomLocation", "Location")
                        .WithMany()
                        .HasForeignKey("RoomLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
